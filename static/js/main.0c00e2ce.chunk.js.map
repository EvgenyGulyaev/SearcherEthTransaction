{"version":3,"sources":["components/RequestBad/index.js","components/RequestForm/index.js","components/RequestCard/index.js","App.js","serviceWorker.js","index.js"],"names":["RequestBad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","reason","react_default","a","createElement","className","React","Component","RequestForm","handleChange","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","target","value","wrap","_context","prev","next","setState","cardsCount","_getDataFromServer","stop","_x","apply","arguments","_handleKeyPress","_ref2","_callee2","_context2","key","_x2","_callee3","response","_context3","refs","axios","get","concat","api","sent","data","result","length","handleData","isBadRequest","BadRequest","RequestBad_RequestBad","lib","autoFocus","l","m","s","ref","label","validate","onKeyPress","onChange","type","defaultValue","onClick","waves","node","RequestCard","cards","map","element","index","textClassName","title","blockHash","from","to","App","bind","assertThisInitialized","RequestForm_RequestForm","RequestCard_RequestCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c00e2ce.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\n\n/**\n * Class for Rendering bad request\n */\nclass RequestBad extends React.Component {\n\t/**\n\t * constructor component\n\t * @param props\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\treason: \"ETH wallet not found\"\n\t\t};\n\n\t};\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p className={\"text-request\"}>{this.state.reason}</p>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport {RequestBad}\n","import React from 'react';\nimport {Row, Button, Input, Icon} from 'react-materialize';\nimport {RequestBad} from \"../RequestBad\";\nimport './style.css';\nimport axios from 'axios';\n\n\n/**\n * Class for input with search eth wallet\n */\nclass RequestForm extends React.Component {\n\t/**\n\t * constructor component\n\t * @param props\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tapi: \"http://api.etherscan.io/api?module=account&action=txlist&address=\",\n\t\t\tisBadRequest: false,\n\t\t\tcardsCount: '5'\n\t\t};\n\t};\n\n\n\t/**\n\t * Handle change\n\t * @param e\n\t * @returns {Promise<void>}\n\t */\n\thandleChange = async (e) => {\n\t\tconst {target} = e;\n\t\tconst {value} = target;\n\t\tthis.setState({\n\t\t\tcardsCount: value\n\t\t});\n\t\tawait this._getDataFromServer()\n\t};\n\n\n\t/**\n\t * Waiting Enter from our input\n\t * @param e\n\t * @returns {Promise<void>}\n\t * @private\n\t */\n\t_handleKeyPress = async (e) => {\n\t\tif (e.key === 'Enter') {\n\t\t\tthis._getDataFromServer();\n\t\t}\n\t};\n\n\t/**\n\t * Get data from service and\n\t * if have data use method handleData and setState our data\n\t * else return Bad request\n\t * @param e\n\t * @returns {Promise<void>}\n\t * @private\n\t */\n\t_getDataFromServer = async () => {\n\n\t\t// @var@ for quantity transaction\n\t\tconst {cardsCount} = this.state;\n\n\t\tif (this.refs['search'].state.value) {\n\t\t\tconst response = await axios.get(`${this.state.api}${this.refs['search'].state.value}&sort=desc&apikey=YourApiKeyToken&offset=${cardsCount}&page=1`);\n\t\t\tif (response.data.result !== \"Error! Invalid address format\" && response.data.result.length) {\n\t\t\t\tthis.props.handleData(response.data.result);\n\t\t\t\tthis.setState({isBadRequest: false})\n\t\t\t} else {\n\t\t\t\tthis.props.handleData([]);\n\t\t\t\tthis.setState({isBadRequest: true})\n\t\t\t}\n\t\t}\n\n\t};\n\n\n\trender() {\n\t\t// @var@ for rendering bad request\n\t\tlet BadRequest = (this.state.isBadRequest) ? <RequestBad/> : \"\";\n\t\treturn (\n\t\t\t<div className={\"request-form-center\"}>\n\t\t\t\t<Row>\n\t\t\t\t\t<Input autoFocus={true} l={8} m={8} s={8} ref=\"search\" label=\"Ethereum Account\" validate\n\t\t\t\t\t\t   onKeyPress={this._handleKeyPress}><Icon>search</Icon></Input>\n\n\n\t\t\t\t\t<Input onChange={this.handleChange} l={2} m={2} s={2} ref=\"quantity\" type='select'\n\t\t\t\t\t\t   defaultValue={this.state.cardsCount}>\n\t\t\t\t\t\t<option value='5'>5 Cards</option>\n\t\t\t\t\t\t<option value='10'>10 Cards</option>\n\t\t\t\t\t\t<option value='15'>15 Cards</option>\n\t\t\t\t\t</Input>\n\n\n\t\t\t\t\t<Button className={\"request-form-margin-btn\"} onClick={this._getDataFromServer} l={2} m={2} s={2}\n\t\t\t\t\t\t\twaves='light' node='a'> <Icon>search</Icon></Button>\n\t\t\t\t</Row>\n\t\t\t\t{BadRequest}\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport {RequestForm}\n","import React from 'react';\nimport {Card, Col, Row} from 'react-materialize';\nimport './style.css';\n\n\n/**\n * Class for rendering cards with information\n */\nclass RequestCard extends React.Component {\n\t/**\n\t * constructor component\n\t * @param props\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdata: this.props.data\n\t\t};\n\n\t};\n\n\n\trender() {\n\t\t// @var@ for rendering our cards if we have information\n\t\tlet cards = this.props.data.length ? this.props.data.map((element, index) =>\n\t\t\t\t<Col  key={index} className={\"card-padding\"}>\n\t\t\t\t\t<Card className='teal lighten-1 white-text' textClassName='white-text' title=\"Transaction\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col s={2} m={2} l={2}>\n\t\t\t\t\t\t\t\t<p>Block</p>\n\t\t\t\t\t\t\t\t<p>From</p>\n\t\t\t\t\t\t\t\t<p>To</p>\n\t\t\t\t\t\t\t</Col>\n\n\n\t\t\t\t\t\t\t<Col s={10} m={10} l={10}>\n\t\t\t\t\t\t\t\t<p className={\"card-eth-wallet\"}>{`${element.blockHash}`} </p>\n\t\t\t\t\t\t\t\t<p className={\"card-eth-wallet\"}>{`${element.from}`} </p>\n\t\t\t\t\t\t\t\t<p className={\"card-eth-wallet\"}>{`${element.to}`}</p>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t<Row className={\"card-value-margin-btm\"}>\n\t\t\t\t\t\t\t<Col s={2} m={2} l={2}>Value</Col>\n\t\t\t\t\t\t\t<Col s={10} m={10} l={10}>\n\t\t\t\t\t\t\t\t<p className={\"card-text-right\"}> {element.value/1000000000000000000} ETH</p>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t) :\n\t\t\t\"\";\n\t\treturn (\n\t\t\t<div className={\"cards\"}>\n\t\t\t\t{cards}\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport {RequestCard}\n","import React, {Component} from 'react';\nimport {RequestForm} from \"./components/RequestForm/index\";\nimport {RequestCard} from \"./components/RequestCard\";\nimport './App.css';\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdata: []\n\t\t};\n\t\tthis.handleData = this.handleData.bind(this);\n\t};\n\n\thandleData (data)  {\n\t\tthis.setState({data: data});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<RequestForm handleData={this.handleData.bind(this)}/>\n\t\t\t\t<RequestCard data={this.state.data}/>\n\t\t\t</div>\n\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
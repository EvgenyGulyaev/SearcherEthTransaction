{"version":3,"sources":["components/Warning/index.js","components/RequestForm/index.js","components/Card/index.js","components/RequestCards/index.js","App.js","serviceWorker.js","index.js"],"names":["Warning","_ref","reason","react_default","a","createElement","className","defaultProps","RequestForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","cardsCount","target","value","_getDataFromServer","_handleKeyPress","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","key","stop","_x","apply","arguments","_callee2","response","_context2","state","refs","axios","get","concat","api","sent","data","result","length","handleData","isBadRequest","abrupt","t0","console","log","_this$state","lib","autoFocus","l","m","s","ref","label","validate","onKeyPress","onChange","type","defaultValue","onClick","waves","node","components_Warning","React","Component","RequestCard","blockHash","from","to","textClassName","title","RequestCards","map","el","Card","App","components_RequestForm","components_RequestCards","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eaa2e14f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './style.css';\n\n\nconst Warning = ({ reason }) => <div><p className={\"text-request\"}>{reason}</p></div>\n\nWarning.propTypes = {\n  reason: PropTypes.string,\n};\n\nWarning.defaultProps = {\n  reason: 'ETH wallet not found'\n}\n\nexport default Warning;","import React from 'react';\nimport { Row, Button, Input, Icon } from 'react-materialize';\nimport './style.css';\nimport axios from 'axios';\nimport Warning from '../Warning';\n\n/**\n * Class for input with search eth wallet\n */\nclass RequestForm extends React.Component {\n  /**\n   * constructor component\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      api: \"http://api.etherscan.io/api?module=account&action=txlist&address=\",\n      isBadRequest: false,\n      cardsCount: '5'\n    };\n  };\n\n  /**\n   * Handle change\n   * @param e\n   * @returns {Promise<void>}\n   */\n  handleChange = (e) => {\n    this.setState({ cardsCount: e.target.value }, this._getDataFromServer);\n  };\n\n  /**\n   * Waiting Enter from our input\n   * @param e\n   * @returns {Promise<void>}\n   * @private\n   */\n  _handleKeyPress = async (e) => {\n    if (e.key === 'Enter') {\n      this._getDataFromServer();\n    }\n  };\n\n  /**\n   * Get data from service and\n   * if have data use method handleData and setState our data\n   * else return Bad request\n   * @param e\n   * @returns {Promise<void>}\n   * @private\n   */\n  _getDataFromServer = async () => {\n    // @var@ for quantity transaction\n    const { cardsCount } = this.state;\n    try {\n      if (this.refs['search'].state.value) {\n        const response = await axios.get(`${this.state.api}${this.refs['search'].state.value}&sort=desc&apikey=YourApiKeyToken&offset=${cardsCount}&page=1`);\n        if (response.data.result !== \"Error! Invalid address format\" && response.data.result.length) {\n          this.props.handleData(response.data.result);\n          this.setState({ isBadRequest: false })\n          return\n        }\n        this.props.handleData([]);\n        this.setState({ isBadRequest: true })\n      }\n    }\n    catch (e) {\n      console.log('e', e)\n    }\n  };\n\n  render() {\n    const { isBadRequest, cardsCount } = this.state;\n    return (\n      <div className={\"request-form-center\"}>\n        <Row>\n          <Input autoFocus l={8} m={8} s={8} ref=\"search\" label=\"Ethereum Account\" validate\n                 onKeyPress={this._handleKeyPress}><Icon>search</Icon></Input>\n\n\n          <Input onChange={this.handleChange} l={2} m={2} s={2} ref=\"quantity\" type=\"select\"\n                 defaultValue={cardsCount}>\n            <option value=\"5\">5 Cards</option>\n            <option value=\"10\">10 Cards</option>\n            <option value=\"15\">15 Cards</option>\n          </Input>\n\n\n          <Button className={\"request-form-margin-btn\"}\n                  onClick={this._getDataFromServer}\n                  l={2}\n                  m={2}\n                  s={2}\n                  waves=\"light\"\n                  node=\"a\"> <Icon>search</Icon></Button>\n        </Row>\n        {isBadRequest ? <Warning/> : null}\n      </div>\n    );\n  }\n\n}\n\nexport default RequestForm\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Col, Row } from 'react-materialize';\nimport './style.css';\n\n/**\n * Class for rendering cards with information\n */\nconst RequestCard = ({ blockHash, from, to, value }) => {\n  return (\n    <Col className={\"card-padding\"}>\n      <Card className=\"teal lighten-1 white-text\" textClassName=\"white-text\" title=\"Transaction\">\n        <Row>\n          <Col s={2} m={2} l={2}>\n            <p>Block</p>\n            <p>From</p>\n            <p>To</p>\n          </Col>\n          <Col s={10} m={10} l={10}>\n            <p className={\"card-eth-wallet\"}>{`${blockHash}`} </p>\n            <p className={\"card-eth-wallet\"}>{`${from}`} </p>\n            <p className={\"card-eth-wallet\"}>{`${to}`}</p>\n          </Col>\n        </Row>\n        <Row className={\"card-value-margin-btm\"}>\n          <Col s={2} m={2} l={2}>Value</Col>\n          <Col s={10} m={10} l={10}>\n            <p className={\"card-text-right\"}> {value / 1000000000000000000} ETH</p>\n          </Col>\n        </Row>\n      </Card>\n    </Col>\n  );\n\n}\n\nRequestCard.propTypes = {\n  blockHash: PropTypes.string,\n  from: PropTypes.string,\n  to: PropTypes.string,\n  value: PropTypes.string,\n}\n\nRequestCard.defaultProps = {\n  blockHash: '',\n  from: '',\n  to: '',\n  value: '',\n}\n\nexport default RequestCard\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './style.css';\nimport RequestCard from '../Card';\n\n/**\n * Class for rendering cards with information\n */\nconst RequestCards = ({ data }) => (\n  <div className={\"cards\"}>\n    {\n      data.length ? data.map(el =>\n        <RequestCard\n          blockHash={el.blockHash}\n          from={el.from}\n          to={el.to}\n          key={el.blockHash}\n          value={el.value}\n        />) : null\n    }\n  </div>\n);\n\nRequestCards.propTypes = {\n  data: PropTypes.array,\n}\n\nRequestCards.defaultProps = {\n  data: []\n}\n\nexport default RequestCards\n","import React, { Component } from 'react';\nimport RequestForm from \"./components/RequestForm/index\";\nimport RequestCards from \"./components/RequestCards\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    data: []\n  };\n\n  handleData = (data) => {\n    this.setState({ data });\n  };\n\n  render() {\n    const { data } = this.state;\n    return (\n      <div className=\"App\">\n        <RequestForm handleData={this.handleData}/>\n        <RequestCards data={data}/>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}